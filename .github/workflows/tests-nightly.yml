name: Run tests nightly
on:
  workflow_dispatch: {}
  schedule:
    - cron: '0 5 * * *' # 5AM UTC = 12AM EST

jobs:
  tests-against-source-code-and-latest-install:
    strategy:
      matrix:
        testServer: [ "-Pserver=terra-dev", "-Pserver=terra-verily-autopush" ]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current code
        id: checkout_code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_GITHUB_TOKEN }}
      - name: Set up AdoptOpenJDK 11
        id: setup_jdk
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11
      - name: Cache Gradle packages
        id: cache_gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}
      - name: Grant execute permission for gradlew
        id: allow_execute_gradle
        run: chmod +x gradlew
      - name: Render config
        id: render_config
        run: |
          # this step does the equivalent of the tools/render-config.sh script.
          # on local machines, the script fetches a SA from Vault.
          # in GH actions, the SA key is stored in a GH repo secret.
          # regardless of how it was fetched, tests and scripts expect these
          # keys to be stored in rendered/
          mkdir -p rendered
          echo "$TEST_USER_SA_KEY" > rendered/test-user-account.json
          echo "$DEV_CI_SA_KEY" > rendered/ci-account.json
          echo "$EXT_PROJECT_SA_KEY" > rendered/external-project-account.json
        env:
          TEST_USER_SA_KEY: ${{ secrets.TEST_USER_SA_KEY }}
          DEV_CI_SA_KEY: ${{ secrets.DEV_CI_SA_KEY }}
          EXT_PROJECT_SA_KEY: ${{ secrets.EXT_PROJECT_SA_KEY }}
      - name: Run unit tests
        id: run_unit_tests
        if: always()
        run: |
          echo "Running unit tests for server: ${{ matrix.testServer }}"
          ./gradlew runTestsWithTag -PtestTag=unit ${{ matrix.testServer }} --tests "unit.Workspace.createFailsWithoutSpendAccess"
          mkdir -p ~/logs-unit
          cp -R build/test-context/.terra/logs/ ~/logs-unit/logs/
          cp -R build/test-context/.terra/context.json ~/logs-unit/context.json
      - name: Run integration tests against source code
        id: run_integration_tests_against_source_code
        if: always()
        run: |
          echo "Running integration tests against source code for server: ${{ matrix.testServer }}"
          ./gradlew runTestsWithTag -PtestTag=integration ${{ matrix.testServer }} --tests "integration.Nextflow.helloWorld"
          mkdir -p ~/logs-integration-source
          cp -R build/test-context/.terra/logs/ ~/logs-integration-source/logs/
          cp -R build/test-context/.terra/context.json ~/logs-integration-source/context.json
      - name: Run integration tests against release
        id: run_integration_tests_against_release
        if: always()
        run: |
          echo "Running integration tests against release for server: ${{ matrix.testServer }}"
          ./gradlew runTestsWithTag -PtestTag=integration -PtestInstallFromGitHub ${{ matrix.testServer }} --tests "integration.Nextflow.helloWorld"
          mkdir -p ~/logs-integration-release
          cp -R build/test-context/.terra/logs/ ~/logs-integration-release/logs/
          cp -R build/test-context/.terra/context.json ~/logs-integration-release/context.json
      - name: Archive logs and context file for all test runs
        id: archive_logs_and_context
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs-and-context-[${{ matrix.testServer }}]
          path: |
            ~/logs-unit
            ~/logs-integration-source
            ~/logs-integration-release
      - name: Compose status message
        id: compose_status_message
        if: always()
        run: |
          L2="Unit: ${{ steps.run_unit_tests.outcome }} "
          L3="Integ (Source): ${{ steps.run_integration_tests_against_source_code.outcome }} "
          L4="Integ (Release): ${{ steps.run_integration_tests_against_release.outcome }}"
          text="Link to <https://github.com/DataBiosphere/terra-cli/actions/runs/$GITHUB_RUN_ID|test run>"
          bold="$L2 | $L3 | $L4"
          titleText="CLI nightly test run: ${{ matrix.testServer }}"
          if [ "${{ job.status }}" == "success" ]; then
            title=":white_check_mark:$titleText"
          else
            title=":no_entry:$titleText"
          fi
          echo ::set-output name=status-title::$title
          echo ::set-output name=status-text::$text
          echo ::set-output name=status-bold::$bold
      - name: Notify PF alerts slack channel
        # don't notify manually triggered runs
        if: always() && github.event_name == 'workflow_dispatch'
        uses: broadinstitute/action-slack@v3.8.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        with:
          status: ${{ job.status }}
          channel: "@mmedlock" #"#platform-foundation-alerts"
          username: ${{ steps.compose_status_message.outputs.status-title }}
          author_name: ${{ steps.compose_status_message.outputs.status-bold }}
          icon_emoji: ':cli:'
          text: ${{ steps.compose_status_message.outputs.status-text }}
