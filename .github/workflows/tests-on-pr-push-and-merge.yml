name: Run tests against PRs (pre and post merge)
on:
  workflow_dispatch: {}
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  lint-and-static-analysis:
    runs-on: ubuntu-latest
    if: "!contains( github.event.sender.login, 'broadbot')"
    steps:
      - name: Checkout current code
        id: checkout_code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_GITHUB_TOKEN }}
      - name: Run linter
        id: run_linter
        run: |
          ./gradlew spotlessCheck
      - name: Run static analysis
        id: run_static_analysis
        run: |
          ./gradlew spotbugsMain spotbugsTest
  tests-against-source-code:
    strategy:
      matrix:
        testTag: [ "unit", "integration" ]
      fail-fast: false
    runs-on: ubuntu-latest
    if: "!contains( github.event.sender.login, 'broadbot')"
    steps:
      - name: Checkout current code
        id: checkout_code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.BROADBOT_GITHUB_TOKEN }}
      - name: Set up AdoptOpenJDK 11
        id: setup_jdk
        uses: joschi/setup-jdk@v2
        with:
          java-version: 11
      - name: Cache Gradle packages
        id: cache_gradle
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.gradle') }}
          restore-keys: v1-${{ runner.os }}-gradle-${{ hashfiles('**/gradle-wrapper.properties') }}
      - name: Grant execute permission for gradlew
        id: allow_execute_gradle
        run: chmod +x gradlew
      - name: Render config
        id: render_config
        run: |
          # this step does the equivalent of the tools/render-config.sh script.
          # on local machines, the script fetches a SA from Vault.
          # in GH actions, the SA key is stored in a GH repo secret.
          # regardless of how it was fetched, tests and scripts expect these
          # keys to be stored in rendered/
          mkdir -p rendered
          echo "$TEST_USER_SA_KEY" > rendered/test-user-account.json
          echo "$DEV_CI_SA_KEY" > rendered/ci-account.json
          echo "$EXT_PROJECT_SA_KEY" > rendered/external-project-account.json
          echo "$JANITOR_CLIENT_SA_KEY" > rendered/janitor-client.json
        env:
          TEST_USER_SA_KEY: ${{ secrets.TEST_USER_SA_KEY }}
          DEV_CI_SA_KEY: ${{ secrets.DEV_CI_SA_KEY }}
          EXT_PROJECT_SA_KEY: ${{ secrets.EXT_PROJECT_SA_KEY }}
          JANITOR_CLIENT_SA_KEY: ${{ secrets.JANITOR_CLIENT_SA_KEY }}
      - name: Build Docker image
        id: build_docker_image
        run: |
          # additionally pull the main branch for on-push-to-PRs, so we can diff and see what changed
          if [ "$GHA_EVENT_NAME" = "pull_request" ]; then
            git fetch --no-tags --depth=1 origin main
            if [ -z "$(git diff --name-only origin/main | grep '^docker/')" ]; then
              echo "No changes to docker/ directory. Using default Docker image."
              exit 0
            fi
          fi
          echo "Building new Docker image."
          imageTag="ghaTest"
          ./tools/build-docker.sh $imageTag # generates an image with this tag
          echo "::set-output name=test_docker_image::-PdockerImage=terra-cli/local:$imageTag"
        env:
          GITHUB_TOKEN: ${{ secrets.BROADBOT_GITHUB_TOKEN }}
          GHA_EVENT_NAME: ${{ github.event_name }}
      - name: Grant write permission to the gcloud config directory
        id: allow_write_gcloud_config
        run: |
          mkdir -p ~/.config/gcloud
          chmod +rwx ~/.config/gcloud
      - name: Run tests
        id: run_tests
        run: |
          # runs against the default server: terra-dev
          echo "Running tests with tag: ${{ matrix.testTag }}"
          echo "Using docker image (uses default if blank): $TEST_DOCKER_IMAGE"
          ./gradlew runTestsWithTag -PtestTag=${{ matrix.testTag }} $TEST_DOCKER_IMAGE
        env:
          TEST_DOCKER_IMAGE: ${{ steps.build_docker_image.outputs.test_docker_image }}
      - name: Archive logs and context file
        id: archive_logs_and_context
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: logs-and-context-${{ matrix.testTag }}
          path: |
            build/test-context/.terra/logs/
            build/test-context/.terra/global-context.json
