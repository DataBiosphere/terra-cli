name: Run tests against PRs (pre and post merge)
on:
  workflow_dispatch: { }
  push:
    branches: [ main ]
    paths-ignore: [ '**.md' ]
  pull_request:
    # Branch settings require status checks before merging, so don't add paths-ignore.
    branches: [ '**' ]

env:
  GITHUB_TOKEN: ${{ secrets.BROADBOT_GITHUB_TOKEN }}
  GHA_EVENT_NAME: ${{ github.event_name }}

jobs:

  # Lint & Static Analysis required only on pull requests
  lint-and-static-analysis:
    runs-on: ubuntu-latest
    if: "!contains( github.event.sender.login, 'broadbot' ) && (${{ GHA_EVENT_NAME }} == 'pull_request')"
    steps:
    - name: Checkout current code
      uses: actions/checkout@v2
      with:
        token: ${{ GITHUB_TOKEN }}
    - name: Setup JDK
      uses: ./.github/actions/setup_jdk
    - name: Run Linter & Static analysis
      uses: ./.github/actions/lint_sa

  # Unit & Integration tests
  tests-against-source-code:
    strategy:
      matrix:
        testTag: [ "unit", "integration" ]
      fail-fast: true
    runs-on: ubuntu-latest
    if: "!contains( github.event.sender.login, 'broadbot')"
    steps:
    - name: Checkout current code
      uses: actions/checkout@v2
      with:
          token: ${{ GITHUB_TOKEN }}
    - name: Setup JDK
      uses: ./.github/actions/setup_jdk
    - name: Cache Gradle packages
      uses: ./.github/actions/cache_gradle
    - name: Render config
      uses: ./.github/actions/render_config
    - name: Build Docker image
      run: |
        # additionally pull the main branch for on-push-to-PRs, so we can diff and see what changed
        if [ "$GHA_EVENT_NAME" = "pull_request" ]; then
          git fetch --no-tags --depth=1 origin main
          if [ -z "$(git diff --name-only origin/main | grep '^docker/')" ]; then
            echo "No changes to docker/ directory. Using default Docker image."
            exit 0
          fi
        fi
        echo "Building new Docker image."
        imageTag="ghaTest"
        ./tools/build-docker.sh $imageTag # generates an image with this tag
        echo "::set-output name=test_docker_image::-PdockerImage=terra-cli/local:$imageTag"
      #env:
       # GITHUB_TOKEN: ${{ GITHUB_TOKEN }}
    - name: Run tests
      run: |
        # runs against the default server: broad-dev
        echo "Running tests with tag: ${{ matrix.testTag }}"
        echo "Using docker image (uses default if blank): $TEST_DOCKER_IMAGE"
        ./gradlew runTestsWithTag -PtestTag=${{ matrix.testTag }} --scan $TEST_DOCKER_IMAGE
      env:
        TEST_DOCKER_IMAGE: ${{ steps.build_docker_image.outputs.test_docker_image }}

    - name: Archive logs and context file # TODO Make action
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: logs-and-context-${{ matrix.testTag }}
        path: |
          build/test-context/.terra/logs/
          build/test-context/.terra/context.json
          build/test-context/*/.terra/logs/
          build/test-context/*/.terra/context.json
